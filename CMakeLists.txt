
CMAKE_MINIMUM_REQUIRED(VERSION 3.5)

PROJECT(ta-lib)

SET(TA_LIB_PROJECT_TITTLE "TA-Lib : Technical Analysis Library")

SET(TA_LIB_VERSION_MAJOR 0)
SET(TA_LIB_VERSION_MINOR 6)
SET(TA_LIB_VERSION_BUILD 0)
SET(TA_LIB_VERSION_EXTRA "dev")

SET(TA_LIB_VERSION_FULL "${TA_LIB_VERSION_MAJOR}.${TA_LIB_VERSION_MINOR}.${TA_LIB_VERSION_BUILD}")
IF(TA_LIB_VERSION_EXTRA)
	SET(TA_LIB_VERSION_FULL "${TA_LIB_VERSION_FULL}-${TA_LIB_VERSION_EXTRA}")
ENDIF(TA_LIB_VERSION_EXTRA)

OPTION(TA_LIB_ENABLE_C "Enable C library" ON)
OPTION(TA_LIB_ENABLE_GEN_CODE "Enable the gen_code utility (only needed by when adding new functions to the Ta-Lib)" ON)
OPTION(TA_LIB_ENABLE_DOTNET "Enable .NET bindings" OFF)
OPTION(TA_LIB_ENABLE_EXCEL "Enable Excel bindings" OFF)
OPTION(TA_LIB_ENABLE_JAVA "Enable Java bindings" ON)
OPTION(TA_LIB_ENABLE_SWIG "Enable SWIG bindings" OFF)
OPTION(TA_LIB_ENABLE_TESTS "Enable tests building" ON)
OPTION(TA_LIB_ENABLE_DOCS "Enable documantations building" ON)

# Packaging 

SET(CPACK_PACKAGE_NAME ${PROJECT_NAME})

SET(CPACK_PACKAGE_VERSION ${TA_LIB_VERSION_FULL})
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${PROJECT_NAME}-src-${TA_LIB_VERSION_FULL}")

SET(CPACK_SOURCE_GENERATOR "TGZ;ZIP")
SET(CPACK_SOURCE_IGNORE_FILES "/CVS/;/\\\\.svn/;\\\\.git/;temp/;\\\\.swp$;\\\\.#;/#;\\\\.*~;cscope\\\\.*")
SET(CPACK_GENERATOR "TGZ;ZIP")
SET(CPACK_INCLUDE_TOPLEVEL_DIRECTORY OFF)

# try to find package befor download it
SET(FETCHCONTENT_TRY_FIND_PACKAGE_MODE "ALWAYS")
SET(JAVA_SOURCE_VERSION "1.6")

# difine source dir for CMake modules
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

INCLUDE(CPack)
INCLUDE(CTest)
include(FetchContent)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckTypeSize)
INCLUDE(CheckSymbolExists)
CHECK_INCLUDE_FILES(float.h HAVE_FLOAT_H)
CHECK_INCLUDE_FILES(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILES(locale.h HAVE_LOCALE_H)
CHECK_INCLUDE_FILES(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILES(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES(wchar.h HAVE_WCHAR_H)
CHECK_INCLUDE_FILES(wctype.h HAVE_WCTYPE_H)
CHECK_FUNCTION_EXISTS(floor HAVE_FLOOR)
CHECK_FUNCTION_EXISTS(isascii HAVE_ISASCII)
CHECK_FUNCTION_EXISTS(localeconv HAVE_LOCALECONV)
CHECK_FUNCTION_EXISTS(mblen HAVE_MBLEN)
CHECK_FUNCTION_EXISTS(memmove HAVE_MEMMOVE)
CHECK_FUNCTION_EXISTS(memset HAVE_MEMSET)
CHECK_FUNCTION_EXISTS(modf HAVE_MODF)
CHECK_FUNCTION_EXISTS(pow HAVE_POW)
CHECK_FUNCTION_EXISTS(sqrt HAVE_SQRT)
CHECK_FUNCTION_EXISTS(strcasecmp HAVE_STRCASECMP)
CHECK_FUNCTION_EXISTS(strchr HAVE_STRCHR)
CHECK_FUNCTION_EXISTS(strerror HAVE_STRERROR)
CHECK_FUNCTION_EXISTS(strncasecmp HAVE_STRNCASECMP)
CHECK_FUNCTION_EXISTS(strrchr HAVE_STRRCHR)
CHECK_FUNCTION_EXISTS(strstr HAVE_STRSTR)
CHECK_FUNCTION_EXISTS(strtol HAVE_STRTOL)
CHECK_FUNCTION_EXISTS(strtoul HAVE_STRTOUL)
CHECK_FUNCTION_EXISTS(strcoll HAVE_STRCOLL)
CHECK_FUNCTION_EXISTS(strftime HAVE_STRFTIME)
CHECK_FUNCTION_EXISTS(vprintf HAVE_VPRINTF)
CHECK_TYPE_SIZE(ptrdiff_t SIZEOF_PTRDIFF_T)
IF(HAVE_SIZEOF_PTRDIFF_T)
	SET(HAVE_PTRDIFF_T 1)
ELSE()
	SET(HAVE_PTRDIFF_T 0)
ENDIF()
CHECK_TYPE_SIZE(size_t SIZEOF_SIZE_T)
IF(HAVE_SIZEOF_SIZE_T)
	SET(HAVE_SIZE_T 1)
ELSE()
	SET(HAVE_SIZE_T 0)
	SET(size_t "unsigned")
ENDIF()
CHECK_SYMBOL_EXISTS("struct tm" "sys/time.h" TM_IN_SYS_TIME)
CONFIGURE_FILE(${ta-lib_SOURCE_DIR}/ta-lib/c/include/ta_config.h.cmake ${ta-lib_SOURCE_DIR}/ta-lib/c/include/ta_config.h)


IF(TA_LIB_ENABLE_C)
	ADD_SUBDIRECTORY(ta-lib/c)
ENDIF(TA_LIB_ENABLE_C)

IF(TA_LIB_ENABLE_DOTNET)
	MESSAGE(SEND_ERROR "Not yet implemented")
	IF(!WIN32)
		MESSAGE(SEND_ERROR ".NET bindings can be generated only onder Windows at the times")
	ENDIF(!WIN32)
	ADD_SUBDIRECTORY(ta-lib/dotnet)
ELSE(TA_LIB_ENABLE_DOTNET)
	MESSAGE(STATUS "DotNet is disabled")
ENDIF(TA_LIB_ENABLE_DOTNET)

IF(TA_LIB_ENABLE_EXCEL)
	MESSAGE(SEND_ERROR "Not yet implemented")
ELSE(TA_LIB_ENABLE_EXCEL)
	MESSAGE(STATUS "Excel is disabled")

IF(TA_LIB_ENABLE_JAVA)
	MESSAGE(STATUS "Java is enabled")
	find_package(Java 1.8 REQUIRED COMPONENTS Development)
	IF(JAVA_FOUND)
    	include(UseJava)
		message(STATUS "Java source and target version is ${JAVA_SOURCE_VERSION}")
		ADD_SUBDIRECTORY(ta-lib/java)
	ELSE(JAVA_FOUND)
    	message(WARNING "Couldn't find Java")
	ENDIF(JAVA_FOUND)
ELSE(TA_LIB_ENABLE_JAVA)
	MESSAGE(STATUS "Java is disabled")
ENDIF(TA_LIB_ENABLE_JAVA)

IF(TA_LIB_ENABLE_SWIG)
	MESSAGE(STATUS "SWIG is enabled")
	find_package(SWIG 4.0 REQUIRED COMPONENTS python perl5)
	IF(SWIG_FOUND)
		include(UseSWIG)
  		ADD_SUBDIRECTORY(ta-lib/swig)
	ENDIF(SWIG_FOUND)
ELSE(TA_LIB_ENABLE_SWIG)
	MESSAGE(STATUS "SWIG is disabled")
ENDIF(TA_LIB_ENABLE_SWIG)

IF(TA_LIB_ENABLE_TESTS)
	MESSAGE(STATUS "Build ta_regtest is enabled")
	ADD_SUBDIRECTORY(ta-lib/c/src/tools/ta_regtest)
	enable_testing()
	add_test(NAME ta_regtest COMMAND ${EXECUTABLE_OUTPUT_PATH}/ta_regtest)
ELSE(TA_LIB_ENABLE_TESTS) 
	MESSAGE(STATUS "Build ta_regtest is disabled")
ENDIF(TA_LIB_ENABLE_TESTS)

IF(TA_LIB_ENABLE_GEN_CODE)
	MESSAGE(STATUS "Build gen_code is enabled")
	ADD_SUBDIRECTORY(ta-lib/c/src/tools/gen_code)
ELSE(TA_LIB_ENABLE_GEN_CODE) 
	MESSAGE(STATUS "Build ta_regtest is disabled")
ENDIF(TA_LIB_ENABLE_GEN_CODE)

IF(TA_LIB_ENABLE_DOCS)
	MESSAGE(STATUS "Build documentations is enabled")
	find_package(Sphinx REQUIRED)
	IF(Sphinx_FOUND)
		ADD_SUBDIRECTORY(tadoc)
	else(Sphinx_FOUND)
		MESSAGE(STATUS "Sphinx nor Found Build Doc disabled")
		SET(TA_LIB_ENABLE_DOCS OFF)
	ENDIF(Sphinx_FOUND)
ELSE(TA_LIB_ENABLE_DOCS)
	MESSAGE(STATUS "Build documentations is disabled")
ENDIF(TA_LIB_ENABLE_DOCS)
